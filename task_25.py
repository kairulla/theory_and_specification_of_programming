# Задача 25. Муравей
# Посередине клетчатого листа бумаги
# нарисована замкнутая несамопересекающаяся ломаная,
# звенья которой идут по сторонам клеток.
# Муравей может переходить на одну из четырех соседних клеток,
# отмечать клетки, где он уже был.
# Муравей видит, пересек ли он линию и вышел ли он на край листа.
# Написать алгоритм, который определяет, где находится муравей:
# внутри области, ограниченной ломаной,
# или снаружи ее.
#
# Технические условия:
# Данные хранятся во внешнем файле mur.dat следующим образом:
# в первой строке записывается количество звеньев ломаной;
# вторая строка - координаты муравья;
# в каждой последующей строке записывается четыре числа
# координаты двух клеток, между которыми проходит граница.
#
# Оборазец текстового файла mur.dat
#                                         18
#                                         4 2
#                                         0 1 1 1
#                                         1 1 1 2
#                                         1 2 2 2
#                                         1 3 2 3
#                                         2 3 2 4
#                                         3 3 3 4
#                                         3 3 4 3
#                                         3 2 4 2
#                                         4 1 4 2
#                                         4 2 5 2
#                                         5 2 5 3
#                                         5 2 6 2
#                                         5 1 6 1
#                                         5 1 5 0
#                                         4 1 4 0
#                                         3 1 3 0
#                                         2 1 2 0
#                                         1 1 1 0

def where(p, q, z):
    a = q[1] - p[1]
    b = p[0] - q[0]
    c = p[1] * (q[0] - p[0]) - p[0] * (q[1] - p[1])
    r = a * z[0] + b * z[1] + c
    if r > 0:
        return 1
    elif r < 0:
        return -1
    else:
        return 0


def per(a1, b1, a2, b2):
    if (where(a1, b1, a2) * where(a1, b1, b2) == -1) and (where(a2, b2, a1) * where(a2, b2, b1) == -1):
        return 1
    else:
        return 0


count = 0
coll = 0
q1 = (0.5, 0.5)
q2 = (0.5, 0.0)

with open('mur.dat', 'r') as file:
    coll = int(file.readline().strip())
    q1 = tuple(map(float, file.readline().strip().split()))
    q1 = (q1[0] + 0.5, q1[1] + 0.5)
    q2 = (0.5, 0.0)

    for _ in range(coll):
        line = file.readline().strip().split()
        ax, ay, bx, by = map(int, line)

        p1 = None
        p2 = None

        if ax == bx:
            if abs(ay - by) == 1:
                p1 = (ax, max(ay, by))
                p2 = (ax, max(ay, by))
        elif ay == by:
            if abs(ax - bx) == 1:
                p1 = (max(ax, bx), ay)
                p2 = (max(ax, bx), ay)

        if p1 is not None and p2 is not None:
            count += per(p1, p2, q1, q2)

if count % 2 != 0:
    print('Внутри!')
else:
    print('Снаружи!')
